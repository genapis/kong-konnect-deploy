name: Konnect API Builder Workflow

on:
  workflow_call:
    inputs:
      REGION:
        description: 'Konnect region (e.g., us, eu, au, me, in)'
        required: true
        type: string
        default: 'eu'

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install required tools
        run: |
          # Install yq
          echo "Installing yq..."
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
          
          # Install jq
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
          
          # Verify httpie installation
          echo "Verifying curl..."
          if ! command -v http &> /dev/null; then
              sudo apt-get install -y httpie
          fi
          
          # Verify all tools
          echo "Verifying installed tools..."
          http --version || exit 1
          yq --version || exit 1
          jq --version || exit 1
          echo "✅ All required tools are installed and verified"

      - name: Install Insomnia CLI
        run: |
          curl -sL https://github.com/Kong/insomnia/releases/download/core%4011.5.0/inso-linux-x64-11.5.0.tar.xz -o insomnia.tar.xz
          tar -xf insomnia.tar.xz
          sudo cp inso /usr/local/bin/
          # Verify insomnia installation
          inso --version || exit 1
          echo "✅ inso installed and verified"
      - name: Install decK
        run: |
          echo "Installing decK..."
          curl -sL https://github.com/Kong/deck/releases/download/v1.51.0/deck_1.51.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz
          sudo cp deck /usr/local/bin/
          # Verify decK installation
          deck version || exit 1
          echo "✅ decK installed and verified"
          
      - name: Sync Kong configuration
        env:
          DECK_KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          KONNECT_CONTROL_PLANE: ${{ vars.KONNECT_CONTROL_PLANE }}
        run: |
          TAGS=$(yq eval '._info.select_tags' kong.yml)
          deck gateway sync --konnect-token "$DECK_KONNECT_TOKEN" --konnect-addr https://eu.api.konghq.com --konnect-control-plane-name aigw-cp kong.yml

      # - name: Run API Tests
      #   env:
      #     INSOMNIA_API_URL: ${{ vars.API_URL }}
      #   run: |
      #     # Run all test suites from the Insomnia file
      #     inso run test insomnia.json --env production
      #     if [ $? -eq 0 ]; then
      #       echo "API Tests passed successfully!"
      #     else
      #       echo "API Tests failed!"
      #     fi

      - name: Publish API to Portal
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          PORTAL_ID: ${{ secrets.PORTAL_ID }}
          REGION: ${{ inputs.REGION }}
        run: |
            #!/bin/bash

            # Script to create an API, add documentation, add specification (version), and publish to a portal in Konnect.
            # Designed to run in a GitHub Action environment.
            # Uses environment variables: KONNECT_TOKEN, PORTAL_ID, REGION
            # Dependencies: curl, jq

            # Validate environment variables
            if [ -z "$KONNECT_TOKEN" ] || [ -z "$PORTAL_ID" ] || [ -z "$REGION" ]; then
                echo "::error::Missing required environment variables: KONNECT_TOKEN, PORTAL_ID, or REGION"
                exit 1
            fi

            BASE_URL="https://${REGION}.api.konghq.com/v3"

            yq -i '.servers[0].url = "https://api.apiprimer.com"' openapi.yml
            # Sample API data
            API_NAME=$(yq eval '.info.title' openapi.yml)
            API_VERSION=$(yq eval '.info.version' openapi.yml)
            API_SLUG=`echo $API_NAME | tr '[A-Z]' '[a-z]' | tr ' ' '-'`
            API_DESCRIPTION="A sample API for demonstration."

            # Sample OpenAPI Specification (minimal valid OAS 3.0)
            SPEC_VERSION=$(yq eval '.info.version' openapi.yml)
            SPEC_CONTENT=$(yq -o json openapi.yml | jq -c . | jq @json)

            echo "::group::Step 1: Creating API"
            CREATE_API_BODY='{
            "name": "'"$API_NAME"'",
            "version": "'"$API_VERSION"'",
            "slug": "'"$API_SLUG"'",
            "description": "'"$API_DESCRIPTION"'"
            }'
            RESPONSE=$(http --print=hb -A bearer -a "$KONNECT_TOKEN" "$BASE_URL/apis" <<< "$CREATE_API_BODY")
            STATUS_CODE=$(echo "$RESPONSE" | head -n 1 | awk '{print $2}')
            RESPONSE_BODY=$(echo "$RESPONSE" | awk '/\{/{p=1} p')

            if [ "$STATUS_CODE" -eq 201 ]; then
                echo "Request successful! Status code: $STATUS_CODE"
                # Parse JSON response body using jq (if JSON)
                API_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
                echo "::group::Step 2: Creating API Version"
                CREATE_VERSION_BODY='{
                    "version": "'"$SPEC_VERSION"'",
                    "spec": {
                        "content": '"$SPEC_CONTENT"'
                    }
                }'
                VERSION_RESPONSE=$(http --print=hb -A bearer -a "$KONNECT_TOKEN" "$BASE_URL/apis/$API_ID/versions" <<< "$CREATE_VERSION_BODY")
                STATUS_CODE=$(echo "$VERSION_RESPONSE" | head -n 1 | awk '{print $2}')
                RESPONSE_BODY=$(echo "$VERSION_RESPONSE" | awk '/\{/{p=1} p')
                if [ "$STATUS_CODE" -eq 201 ]; then
                  echo "Version added successfully! Status code: $STATUS_CODE"
                  VERSION_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
                  echo "::group::Step 3: Publishing API to Portal"
                  PUBLISH_BODY='{
                    "visibility": "public"
                  }'
                  PUBLISH_RESPONSE=$(http --print=hb -A bearer -a "$KONNECT_TOKEN" PUT "$BASE_URL/apis/$API_ID/publications/$PORTAL_ID" <<< "$PUBLISH_BODY")
                  STATUS_CODE=$(echo "$PUBLISH_RESPONSE" | head -n 1 | awk '{print $2}')
                  RESPONSE_BODY=$(echo "$PUBLISH_RESPONSE" | awk '/\{/{p=1} p')
                  if [ "$STATUS_CODE" -eq 200 ]; then
                    echo "API published to Portal successfully!"
                    echo "You can view it at: https://developer.apiprimer.com"
                    echo "::endgroup::"
                  else
                    echo "::error::Failed to publish API version. HTTP $STATUS_CODE - $RESPONSE_BODY"
                    echo "::endgroup::"
                  fi
                else
                  echo "::error::Failed to add version. HTTP $STATUS_CODE - $RESPONSE_BODY"
                  echo "::endgroup::"
                fi
            else
              echo "::error::Failed to add version. HTTP $STATUS_CODE - $RESPONSE_BODY"
              echo "::endgroup::"
            fi
